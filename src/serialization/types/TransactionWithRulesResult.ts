/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Flagright from "../../api/index";
import * as core from "../../core";
import { TransactionState } from "./TransactionState";
import { TransactionAmountDetails } from "./TransactionAmountDetails";
import { TransactionWithRulesResultOriginPaymentDetails } from "./TransactionWithRulesResultOriginPaymentDetails";
import { TransactionWithRulesResultDestinationPaymentDetails } from "./TransactionWithRulesResultDestinationPaymentDetails";
import { OriginFundsInfo } from "./OriginFundsInfo";
import { DeviceData } from "./DeviceData";
import { Tag } from "./Tag";
import { ExecutedRulesResult } from "./ExecutedRulesResult";
import { HitRulesDetails } from "./HitRulesDetails";
import { RuleAction } from "./RuleAction";
import { TransactionRiskScoringResult } from "./TransactionRiskScoringResult";

export const TransactionWithRulesResult: core.serialization.ObjectSchema<
    serializers.TransactionWithRulesResult.Raw,
    Flagright.TransactionWithRulesResult
> = core.serialization.object({
    type: core.serialization.string(),
    transactionId: core.serialization.string(),
    timestamp: core.serialization.number(),
    originUserId: core.serialization.string().optional(),
    destinationUserId: core.serialization.string().optional(),
    transactionState: TransactionState.optional(),
    originAmountDetails: TransactionAmountDetails.optional(),
    destinationAmountDetails: TransactionAmountDetails.optional(),
    originPaymentDetails: TransactionWithRulesResultOriginPaymentDetails.optional(),
    destinationPaymentDetails: TransactionWithRulesResultDestinationPaymentDetails.optional(),
    originFundsInfo: OriginFundsInfo.optional(),
    relatedTransactionIds: core.serialization.list(core.serialization.string()).optional(),
    productType: core.serialization.string().optional(),
    promotionCodeUsed: core.serialization.boolean().optional(),
    reference: core.serialization.string().optional(),
    originDeviceData: DeviceData.optional(),
    destinationDeviceData: DeviceData.optional(),
    tags: core.serialization.list(Tag).optional(),
    updateCount: core.serialization.number().optional(),
    paymentApprovalTimestamp: core.serialization.number().optional(),
    executedRules: core.serialization.list(ExecutedRulesResult),
    hitRules: core.serialization.list(HitRulesDetails),
    status: RuleAction,
    riskScoreDetails: TransactionRiskScoringResult.optional(),
});

export declare namespace TransactionWithRulesResult {
    export interface Raw {
        type: string;
        transactionId: string;
        timestamp: number;
        originUserId?: string | null;
        destinationUserId?: string | null;
        transactionState?: TransactionState.Raw | null;
        originAmountDetails?: TransactionAmountDetails.Raw | null;
        destinationAmountDetails?: TransactionAmountDetails.Raw | null;
        originPaymentDetails?: TransactionWithRulesResultOriginPaymentDetails.Raw | null;
        destinationPaymentDetails?: TransactionWithRulesResultDestinationPaymentDetails.Raw | null;
        originFundsInfo?: OriginFundsInfo.Raw | null;
        relatedTransactionIds?: string[] | null;
        productType?: string | null;
        promotionCodeUsed?: boolean | null;
        reference?: string | null;
        originDeviceData?: DeviceData.Raw | null;
        destinationDeviceData?: DeviceData.Raw | null;
        tags?: Tag.Raw[] | null;
        updateCount?: number | null;
        paymentApprovalTimestamp?: number | null;
        executedRules: ExecutedRulesResult.Raw[];
        hitRules: HitRulesDetails.Raw[];
        status: RuleAction.Raw;
        riskScoreDetails?: TransactionRiskScoringResult.Raw | null;
    }
}
