/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Flagright from "../../api/index";
import * as core from "../../core";
import { LegalEntity } from "./LegalEntity";
import { UserStateDetails } from "./UserStateDetails";
import { KycStatusDetails } from "./KycStatusDetails";
import { Person } from "./Person";
import { TransactionLimits } from "./TransactionLimits";
import { RiskLevel } from "./RiskLevel";
import { PaymentMethod } from "./PaymentMethod";
import { UserEntityLink } from "./UserEntityLink";
import { AcquisitionChannel } from "./AcquisitionChannel";
import { BusinessSavedPaymentDetailsItem } from "./BusinessSavedPaymentDetailsItem";
import { MccDetails } from "./MccDetails";
import { UserTag } from "./UserTag";
import { PersonAttachment } from "./PersonAttachment";

export const Business: core.serialization.ObjectSchema<serializers.Business.Raw, Flagright.Business> =
    core.serialization.object({
        userId: core.serialization.string(),
        createdTimestamp: core.serialization.number(),
        legalEntity: LegalEntity,
        activatedTimestamp: core.serialization.number().optional(),
        userStateDetails: UserStateDetails.optional(),
        kycStatusDetails: KycStatusDetails.optional(),
        shareHolders: core.serialization.list(Person).optional(),
        directors: core.serialization.list(Person).optional(),
        transactionLimits: TransactionLimits.optional(),
        riskLevel: RiskLevel.optional(),
        kycRiskLevel: RiskLevel.optional(),
        allowedPaymentMethods: core.serialization.list(PaymentMethod).optional(),
        lastTransactionTimestamp: core.serialization.number().optional(),
        linkedEntities: UserEntityLink.optional(),
        acquisitionChannel: AcquisitionChannel.optional(),
        savedPaymentDetails: core.serialization.list(BusinessSavedPaymentDetailsItem).optional(),
        mccDetails: MccDetails.optional(),
        tags: core.serialization.list(UserTag).optional(),
        attachments: core.serialization.list(PersonAttachment).optional(),
    });

export declare namespace Business {
    export interface Raw {
        userId: string;
        createdTimestamp: number;
        legalEntity: LegalEntity.Raw;
        activatedTimestamp?: number | null;
        userStateDetails?: UserStateDetails.Raw | null;
        kycStatusDetails?: KycStatusDetails.Raw | null;
        shareHolders?: Person.Raw[] | null;
        directors?: Person.Raw[] | null;
        transactionLimits?: TransactionLimits.Raw | null;
        riskLevel?: RiskLevel.Raw | null;
        kycRiskLevel?: RiskLevel.Raw | null;
        allowedPaymentMethods?: PaymentMethod.Raw[] | null;
        lastTransactionTimestamp?: number | null;
        linkedEntities?: UserEntityLink.Raw | null;
        acquisitionChannel?: AcquisitionChannel.Raw | null;
        savedPaymentDetails?: BusinessSavedPaymentDetailsItem.Raw[] | null;
        mccDetails?: MccDetails.Raw | null;
        tags?: UserTag.Raw[] | null;
        attachments?: PersonAttachment.Raw[] | null;
    }
}
