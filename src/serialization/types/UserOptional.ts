/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Flagright from "../../api";
import * as core from "../../core";

export const UserOptional: core.serialization.ObjectSchema<serializers.UserOptional.Raw, Flagright.UserOptional> =
    core.serialization.object({
        userStateDetails: core.serialization.lazyObject(async () => (await import("..")).UserStateDetails).optional(),
        kycStatusDetails: core.serialization.lazyObject(async () => (await import("..")).KycStatusDetails).optional(),
        legalDocuments: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("..")).LegalDocument))
            .optional(),
        contactDetails: core.serialization.lazyObject(async () => (await import("..")).ContactDetails).optional(),
        transactionLimits: core.serialization.lazyObject(async () => (await import("..")).TransactionLimits).optional(),
        riskLevel: core.serialization.lazy(async () => (await import("..")).RiskLevel).optional(),
        acquisitionChannel: core.serialization.lazy(async () => (await import("..")).AcquisitionChannel).optional(),
        reasonForAccountOpening: core.serialization.list(core.serialization.string()).optional(),
        userSegment: core.serialization.lazy(async () => (await import("..")).UserOptionalUserSegment).optional(),
        pepStatus: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("..")).PepStatus))
            .optional(),
        tags: core.serialization.list(core.serialization.lazyObject(async () => (await import("..")).Tag)).optional(),
    });

export declare namespace UserOptional {
    interface Raw {
        userStateDetails?: serializers.UserStateDetails.Raw | null;
        kycStatusDetails?: serializers.KycStatusDetails.Raw | null;
        legalDocuments?: serializers.LegalDocument.Raw[] | null;
        contactDetails?: serializers.ContactDetails.Raw | null;
        transactionLimits?: serializers.TransactionLimits.Raw | null;
        riskLevel?: serializers.RiskLevel.Raw | null;
        acquisitionChannel?: serializers.AcquisitionChannel.Raw | null;
        reasonForAccountOpening?: string[] | null;
        userSegment?: serializers.UserOptionalUserSegment.Raw | null;
        pepStatus?: serializers.PepStatus.Raw[] | null;
        tags?: serializers.Tag.Raw[] | null;
    }
}
