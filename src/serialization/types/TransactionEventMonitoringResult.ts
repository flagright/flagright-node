/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Flagright from "../../api/index";
import * as core from "../../core";
import { Transaction } from "./Transaction";
import { RuleAction } from "./RuleAction";
import { TransactionRiskScoringResult } from "./TransactionRiskScoringResult";
import { ExecutedRulesResult } from "./ExecutedRulesResult";
import { HitRulesDetails } from "./HitRulesDetails";

export const TransactionEventMonitoringResult: core.serialization.ObjectSchema<
    serializers.TransactionEventMonitoringResult.Raw,
    Flagright.TransactionEventMonitoringResult
> = core.serialization.object({
    eventId: core.serialization.string(),
    transaction: Transaction,
    status: RuleAction.optional(),
    riskScoreDetails: TransactionRiskScoringResult.optional(),
    executedRules: core.serialization.list(ExecutedRulesResult),
    hitRules: core.serialization.list(HitRulesDetails),
});

export declare namespace TransactionEventMonitoringResult {
    export interface Raw {
        eventId: string;
        transaction: Transaction.Raw;
        status?: RuleAction.Raw | null;
        riskScoreDetails?: TransactionRiskScoringResult.Raw | null;
        executedRules: ExecutedRulesResult.Raw[];
        hitRules: HitRulesDetails.Raw[];
    }
}
