/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Flagright from "../../api/index";
import * as core from "../../core";
import { LegalEntity } from "./LegalEntity";
import { UserStateDetails } from "./UserStateDetails";
import { KycStatusDetails } from "./KycStatusDetails";
import { Person } from "./Person";
import { TransactionLimits } from "./TransactionLimits";
import { RiskLevel } from "./RiskLevel";
import { PaymentMethod } from "./PaymentMethod";
import { UserEntityLink } from "./UserEntityLink";
import { AcquisitionChannel } from "./AcquisitionChannel";
import { BusinessWithRulesResultSavedPaymentDetailsItem } from "./BusinessWithRulesResultSavedPaymentDetailsItem";
import { MccDetails } from "./MccDetails";
import { UserTag } from "./UserTag";
import { PersonAttachment } from "./PersonAttachment";
import { DeviceData } from "./DeviceData";
import { ExecutedRulesResult } from "./ExecutedRulesResult";
import { HitRulesDetails } from "./HitRulesDetails";
import { UserRiskScoreDetails } from "./UserRiskScoreDetails";

export const BusinessWithRulesResult: core.serialization.ObjectSchema<
    serializers.BusinessWithRulesResult.Raw,
    Flagright.BusinessWithRulesResult
> = core.serialization.object({
    userId: core.serialization.string(),
    createdTimestamp: core.serialization.number(),
    legalEntity: LegalEntity,
    activatedTimestamp: core.serialization.number().optional(),
    userStateDetails: UserStateDetails.optional(),
    kycStatusDetails: KycStatusDetails.optional(),
    shareHolders: core.serialization.list(Person).optional(),
    directors: core.serialization.list(Person).optional(),
    transactionLimits: TransactionLimits.optional(),
    riskLevel: RiskLevel.optional(),
    kycRiskLevel: RiskLevel.optional(),
    allowedPaymentMethods: core.serialization.list(PaymentMethod).optional(),
    lastTransactionTimestamp: core.serialization.number().optional(),
    linkedEntities: UserEntityLink.optional(),
    acquisitionChannel: AcquisitionChannel.optional(),
    savedPaymentDetails: core.serialization.list(BusinessWithRulesResultSavedPaymentDetailsItem).optional(),
    mccDetails: MccDetails.optional(),
    tags: core.serialization.list(UserTag).optional(),
    attachments: core.serialization.list(PersonAttachment).optional(),
    metaData: DeviceData.optional(),
    updateCount: core.serialization.number().optional(),
    executedRules: core.serialization.list(ExecutedRulesResult).optional(),
    hitRules: core.serialization.list(HitRulesDetails).optional(),
    riskScoreDetails: UserRiskScoreDetails.optional(),
});

export declare namespace BusinessWithRulesResult {
    export interface Raw {
        userId: string;
        createdTimestamp: number;
        legalEntity: LegalEntity.Raw;
        activatedTimestamp?: number | null;
        userStateDetails?: UserStateDetails.Raw | null;
        kycStatusDetails?: KycStatusDetails.Raw | null;
        shareHolders?: Person.Raw[] | null;
        directors?: Person.Raw[] | null;
        transactionLimits?: TransactionLimits.Raw | null;
        riskLevel?: RiskLevel.Raw | null;
        kycRiskLevel?: RiskLevel.Raw | null;
        allowedPaymentMethods?: PaymentMethod.Raw[] | null;
        lastTransactionTimestamp?: number | null;
        linkedEntities?: UserEntityLink.Raw | null;
        acquisitionChannel?: AcquisitionChannel.Raw | null;
        savedPaymentDetails?: BusinessWithRulesResultSavedPaymentDetailsItem.Raw[] | null;
        mccDetails?: MccDetails.Raw | null;
        tags?: UserTag.Raw[] | null;
        attachments?: PersonAttachment.Raw[] | null;
        metaData?: DeviceData.Raw | null;
        updateCount?: number | null;
        executedRules?: ExecutedRulesResult.Raw[] | null;
        hitRules?: HitRulesDetails.Raw[] | null;
        riskScoreDetails?: UserRiskScoreDetails.Raw | null;
    }
}
