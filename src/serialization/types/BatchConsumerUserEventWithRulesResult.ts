/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Flagright from "../../api/index";
import * as core from "../../core";
import { UserOptional } from "./UserOptional";
import { ExecutedRulesResult } from "./ExecutedRulesResult";
import { UserRiskScoreDetails } from "./UserRiskScoreDetails";

export const BatchConsumerUserEventWithRulesResult: core.serialization.ObjectSchema<
    serializers.BatchConsumerUserEventWithRulesResult.Raw,
    Flagright.BatchConsumerUserEventWithRulesResult
> = core.serialization.object({
    timestamp: core.serialization.number(),
    userId: core.serialization.string(),
    eventId: core.serialization.string().optional(),
    reason: core.serialization.string().optional(),
    eventDescription: core.serialization.string().optional(),
    updatedConsumerUserAttributes: UserOptional.optional(),
    updateCount: core.serialization.number().optional(),
    executedRules: core.serialization.list(ExecutedRulesResult).optional(),
    riskScoreDetails: UserRiskScoreDetails.optional(),
});

export declare namespace BatchConsumerUserEventWithRulesResult {
    export interface Raw {
        timestamp: number;
        userId: string;
        eventId?: string | null;
        reason?: string | null;
        eventDescription?: string | null;
        updatedConsumerUserAttributes?: UserOptional.Raw | null;
        updateCount?: number | null;
        executedRules?: ExecutedRulesResult.Raw[] | null;
        riskScoreDetails?: UserRiskScoreDetails.Raw | null;
    }
}
