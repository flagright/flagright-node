/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../..";
import * as Flagright from "../../../../../api";
import * as core from "../../../../../core";

export const TransactionEvent: core.serialization.Schema<serializers.TransactionEvent.Raw, Flagright.TransactionEvent> =
    core.serialization.object({
        transactionState: core.serialization.lazy(async () => (await import("../../../..")).TransactionState),
        timestamp: core.serialization.number(),
        transactionId: core.serialization.string(),
        eventId: core.serialization.string().optional(),
        reason: core.serialization.string().optional(),
        eventDescription: core.serialization.string().optional(),
        updatedTransactionAttributes: core.serialization
            .lazyObject(async () => (await import("../../../..")).TransactionUpdatable)
            .optional(),
        metaData: core.serialization.lazyObject(async () => (await import("../../../..")).DeviceData).optional(),
    });

export declare namespace TransactionEvent {
    interface Raw {
        transactionState: serializers.TransactionState.Raw;
        timestamp: number;
        transactionId: string;
        eventId?: string | null;
        reason?: string | null;
        eventDescription?: string | null;
        updatedTransactionAttributes?: serializers.TransactionUpdatable.Raw | null;
        metaData?: serializers.DeviceData.Raw | null;
    }
}
