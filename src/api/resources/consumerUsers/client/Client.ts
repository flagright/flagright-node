/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flagright from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace ConsumerUsers {
    export interface Options {
        environment?: core.Supplier<environments.FlagrightEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class ConsumerUsers {
    constructor(protected readonly _options: ConsumerUsers.Options) {}

    /**
     * ## POST Consumer User
     *
     * `/consumer/user` endpoint allows you to operate on the Consumer user entity.
     *
     * In order to pass the payload of a User to Flagright and verify the User, you will need to call this endpoint with the User payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.
     *
     * ### Payload
     *
     * Each consumer user needs two mandatory fields:
     *
     * * `userId` - Unique identifier for the user
     * * `createdTimestamp` - UNIX timestamp in *milliseconds* for when the User is created in your system
     *
     * @param {Flagright.ConsumerUsersCreateRequest} request
     * @param {ConsumerUsers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Flagright.BadRequestError}
     * @throws {@link Flagright.UnauthorizedError}
     * @throws {@link Flagright.TooManyRequestsError}
     *
     * @example
     *     await client.consumerUsers.create({
     *         lockCraRiskLevel: "true",
     *         lockKycRiskLevel: "true",
     *         validateUserId: "true",
     *         body: {
     *             userId: "96647cfd9e8fe66ee0f3362e011e34e8",
     *             createdTimestamp: 1641654664000,
     *             userDetails: {
     *                 name: {
     *                     firstName: "Baran",
     *                     middleName: "Realblood",
     *                     lastName: "Ozkan"
     *                 },
     *                 dateOfBirth: "1991-01-01",
     *                 countryOfResidence: "US",
     *                 countryOfNationality: "DE"
     *             },
     *             legalDocuments: [{
     *                     documentType: "passport",
     *                     documentNumber: "Z9431P",
     *                     documentIssuedDate: 1639939034000,
     *                     documentExpirationDate: 1839939034000,
     *                     documentIssuedCountry: "DE",
     *                     tags: [{
     *                             key: "customerType",
     *                             value: "wallet"
     *                         }]
     *                 }],
     *             contactDetails: {
     *                 emailIds: ["baran@flagright.com"],
     *                 contactNumbers: ["+37112345432"],
     *                 websites: ["flagright.com"],
     *                 addresses: [{
     *                         addressLines: ["Klara-Franke Str 20"],
     *                         postcode: "10557",
     *                         city: "Berlin",
     *                         state: "Berlin",
     *                         country: "Germany",
     *                         tags: [{
     *                                 key: "customKey",
     *                                 value: "customValue"
     *                             }]
     *                     }]
     *             },
     *             tags: [{
     *                     key: "customKey",
     *                     value: "customValue"
     *                 }]
     *         }
     *     })
     */
    public create(
        request: Flagright.ConsumerUsersCreateRequest,
        requestOptions?: ConsumerUsers.RequestOptions,
    ): core.HttpResponsePromise<Flagright.ConsumerUsersCreateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Flagright.ConsumerUsersCreateRequest,
        requestOptions?: ConsumerUsers.RequestOptions,
    ): Promise<core.WithRawResponse<Flagright.ConsumerUsersCreateResponse>> {
        const { lockCraRiskLevel, lockKycRiskLevel, validateUserId, body: _body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (lockCraRiskLevel != null) {
            _queryParams["lockCraRiskLevel"] = serializers.BooleanString.jsonOrThrow(lockCraRiskLevel, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (lockKycRiskLevel != null) {
            _queryParams["lockKycRiskLevel"] = serializers.BooleanString.jsonOrThrow(lockKycRiskLevel, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (validateUserId != null) {
            _queryParams["validateUserId"] = serializers.BooleanString.jsonOrThrow(validateUserId, {
                unrecognizedObjectKeys: "strip",
            });
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlagrightEnvironment.SandboxApiServerEu1,
                "consumer/users",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "flagright",
                "X-Fern-SDK-Version": "1.8.17",
                "User-Agent": "flagright/1.8.17",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            body: serializers.User.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ConsumerUsersCreateResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Flagright.BadRequestError(
                        serializers.ApiErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 401:
                    throw new Flagright.UnauthorizedError(
                        serializers.ApiErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 429:
                    throw new Flagright.TooManyRequestsError(
                        serializers.ApiErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.FlagrightError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlagrightError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlagrightTimeoutError("Timeout exceeded when calling POST /consumer/users.");
            case "unknown":
                throw new errors.FlagrightError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * ### GET Consumer User
     *
     * `/consumer/user` endpoint allows you to operate on the Consumer User entity.
     *
     * Calling `GET /consumer/user/{userId}` will return the entire user payload and rule execution results for the user with the corresponding `userId`
     *
     * @param {string} userId -
     * @param {ConsumerUsers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Flagright.BadRequestError}
     * @throws {@link Flagright.UnauthorizedError}
     * @throws {@link Flagright.TooManyRequestsError}
     *
     * @example
     *     await client.consumerUsers.get("userId")
     */
    public get(
        userId: string,
        requestOptions?: ConsumerUsers.RequestOptions,
    ): core.HttpResponsePromise<Flagright.UserWithRulesResult> {
        return core.HttpResponsePromise.fromPromise(this.__get(userId, requestOptions));
    }

    private async __get(
        userId: string,
        requestOptions?: ConsumerUsers.RequestOptions,
    ): Promise<core.WithRawResponse<Flagright.UserWithRulesResult>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlagrightEnvironment.SandboxApiServerEu1,
                `consumer/users/${encodeURIComponent(userId)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "flagright",
                "X-Fern-SDK-Version": "1.8.17",
                "User-Agent": "flagright/1.8.17",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.UserWithRulesResult.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Flagright.BadRequestError(
                        serializers.ApiErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 401:
                    throw new Flagright.UnauthorizedError(
                        serializers.ApiErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 429:
                    throw new Flagright.TooManyRequestsError(
                        serializers.ApiErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.FlagrightError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlagrightError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlagrightTimeoutError("Timeout exceeded when calling GET /consumer/users/{userId}.");
            case "unknown":
                throw new errors.FlagrightError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "x-api-key": apiKeyValue };
    }
}
