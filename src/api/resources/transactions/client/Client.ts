/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flagright from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Transactions {
    export interface Options {
        environment?: core.Supplier<environments.FlagrightEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Transactions {
    constructor(protected readonly _options: Transactions.Options) {}

    /**
     * ## POST Transactions
     *
     * `/transactions` endpoint allows you to operate on the [Transaction entity.](/guides/overview/entities#transaction)
     *
     * In order to pass the payload of a transaction to Flagright and verify the transaction, you will need to call this endpoint with the transaction payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.
     *
     *
     * ### Payload
     *
     * Here are some of the most used payload fields explained (you can find the full payload [schema below](/api-reference/api-reference/transactions/verify#request) with 1 line descriptions):
     *
     * * `type`: Type of transaction (Ex: `WITHDRAWAL`, `DEPOSIT`, `TRANSFER` etc).
     * * `transactionId` - Unique Identifier for the transaction.
     * * `timestamp` - UNIX timestamp in *milliseconds* of when the transaction took place
     * * `transactionState` - The state of the transaction, set to `CREATED` by default. [More details here](/guides/overview/entities#transaction-lifecycle-through-transaction-events)
     * * `originUserId` - Unique identifier (if any) of the user who is sending the money. This user must be created within the Flagright system before using the [create a consumer user](/api-reference/api-reference/consumer-users/create) or [create a business user](/api-reference/api-reference/business-users/create) endpoint
     * * `destinationUserId` - Unique identifier (if any) of the user who is receiving the money. This user must be created within the Flagright system before using the [create a consumer user](/api-reference/api-reference/consumer-users/create) or [create a business user](/api-reference/api-reference/business-users/create) endpoint
     * * `originAmountDetails` - Details of the amount being sent from the origin
     * * `destinationAmountDetails` - Details of the amount being received at the destination
     * * `originPaymentDetails` - Payment details (if any) used at the origin (ex: `CARD`, `IBAN`, `WALLET` etc). You can click on the dropdown next to the field in the schema below to view all supported payment types.
     * * `destinationPaymentDetails` - Payment details (if any) used at the destination (ex: `CARD`, `IBAN`, `WALLET` etc). You can click on the dropdown next to the field in the schema below to view all supported payment types.
     *
     * @param {Flagright.TransactionsVerifyRequest} request
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Flagright.BadRequestError}
     * @throws {@link Flagright.UnauthorizedError}
     * @throws {@link Flagright.TooManyRequestsError}
     *
     * @example
     *     await client.transactions.verify({
     *         body: {
     *             type: "DEPOSIT",
     *             transactionId: "7b80a539eea6e78acbd6d458e5971482",
     *             timestamp: 1641654664000,
     *             originUserId: "8650a2611d0771cba03310f74bf6",
     *             destinationUserId: "9350a2611e0771cba03310f74bf6",
     *             originAmountDetails: {
     *                 transactionAmount: 800,
     *                 transactionCurrency: "EUR",
     *                 country: "DE"
     *             },
     *             destinationAmountDetails: {
     *                 transactionAmount: 68351.34,
     *                 transactionCurrency: "INR",
     *                 country: "IN"
     *             },
     *             originPaymentDetails: {
     *                 method: "CARD",
     *                 cardFingerprint: "20ac00fed8ef913aefb17cfae1097cce",
     *                 cardIssuedCountry: "TR",
     *                 transactionReferenceField: "Deposit",
     *                 3DsDone: true
     *             },
     *             destinationPaymentDetails: {
     *                 method: "CARD",
     *                 cardFingerprint: "20ac00fed8ef913aefb17cfae1097cce",
     *                 cardIssuedCountry: "TR",
     *                 transactionReferenceField: "Deposit",
     *                 3DsDone: true
     *             },
     *             promotionCodeUsed: true,
     *             reference: "loan repayment",
     *             originDeviceData: {
     *                 batteryLevel: 95,
     *                 deviceLatitude: 13.0033,
     *                 deviceLongitude: 76.1004,
     *                 ipAddress: "10.23.191.2",
     *                 deviceIdentifier: "3c49f915d04485e34caba",
     *                 vpnUsed: false,
     *                 operatingSystem: "Android 11.2",
     *                 deviceMaker: "ASUS",
     *                 deviceModel: "Zenphone M2 Pro Max",
     *                 deviceYear: "2018",
     *                 appVersion: "1.1.0"
     *             },
     *             destinationDeviceData: {
     *                 batteryLevel: 95,
     *                 deviceLatitude: 13.0033,
     *                 deviceLongitude: 76.1004,
     *                 ipAddress: "10.23.191.2",
     *                 deviceIdentifier: "3c49f915d04485e34caba",
     *                 vpnUsed: false,
     *                 operatingSystem: "Android 11.2",
     *                 deviceMaker: "ASUS",
     *                 deviceModel: "Zenphone M2 Pro Max",
     *                 deviceYear: "2018",
     *                 appVersion: "1.1.0"
     *             },
     *             tags: [{
     *                     key: "customKey",
     *                     value: "customValue"
     *                 }]
     *         }
     *     })
     */
    public verify(
        request: Flagright.TransactionsVerifyRequest,
        requestOptions?: Transactions.RequestOptions,
    ): core.HttpResponsePromise<Flagright.TransactionsVerifyResponse> {
        return core.HttpResponsePromise.fromPromise(this.__verify(request, requestOptions));
    }

    private async __verify(
        request: Flagright.TransactionsVerifyRequest,
        requestOptions?: Transactions.RequestOptions,
    ): Promise<core.WithRawResponse<Flagright.TransactionsVerifyResponse>> {
        const {
            validateOriginUserId,
            validateDestinationUserId,
            validateTransactionId,
            trsOnly,
            body: _body,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (validateOriginUserId != null) {
            _queryParams["validateOriginUserId"] = serializers.BooleanString.jsonOrThrow(validateOriginUserId, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (validateDestinationUserId != null) {
            _queryParams["validateDestinationUserId"] = serializers.BooleanString.jsonOrThrow(
                validateDestinationUserId,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (validateTransactionId != null) {
            _queryParams["validateTransactionId"] = serializers.BooleanString.jsonOrThrow(validateTransactionId, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (trsOnly != null) {
            _queryParams["_trsOnly"] = serializers.BooleanString.jsonOrThrow(trsOnly, {
                unrecognizedObjectKeys: "strip",
            });
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlagrightEnvironment.SandboxApiServerEu1,
                "transactions",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "flagright",
                "X-Fern-SDK-Version": "v1.7.1",
                "User-Agent": "flagright/v1.7.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            body: serializers.Transaction.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.TransactionsVerifyResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Flagright.BadRequestError(
                        serializers.ApiErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 401:
                    throw new Flagright.UnauthorizedError(
                        serializers.ApiErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 429:
                    throw new Flagright.TooManyRequestsError(
                        serializers.ApiErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.FlagrightError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlagrightError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlagrightTimeoutError("Timeout exceeded when calling POST /transactions.");
            case "unknown":
                throw new errors.FlagrightError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * ### GET Transactions
     *
     * `/transactions` endpoint allows you to operate on the [Transaction entity](/guides/overview/entities#transaction).
     *
     * Calling `GET /transactions/{transactionId}` will return the entire transaction payload and rule execution results for the transaction with the corresponding `transactionId`
     *
     * @param {string} transactionId - Unique Transaction Identifier
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Flagright.BadRequestError}
     * @throws {@link Flagright.UnauthorizedError}
     * @throws {@link Flagright.TooManyRequestsError}
     *
     * @example
     *     await client.transactions.get("transactionId")
     */
    public get(
        transactionId: string,
        requestOptions?: Transactions.RequestOptions,
    ): core.HttpResponsePromise<Flagright.TransactionWithRulesResult> {
        return core.HttpResponsePromise.fromPromise(this.__get(transactionId, requestOptions));
    }

    private async __get(
        transactionId: string,
        requestOptions?: Transactions.RequestOptions,
    ): Promise<core.WithRawResponse<Flagright.TransactionWithRulesResult>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlagrightEnvironment.SandboxApiServerEu1,
                `transactions/${encodeURIComponent(transactionId)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "flagright",
                "X-Fern-SDK-Version": "v1.7.1",
                "User-Agent": "flagright/v1.7.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.TransactionWithRulesResult.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Flagright.BadRequestError(
                        serializers.ApiErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 401:
                    throw new Flagright.UnauthorizedError(
                        serializers.ApiErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 429:
                    throw new Flagright.TooManyRequestsError(
                        serializers.ApiErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.FlagrightError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlagrightError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlagrightTimeoutError(
                    "Timeout exceeded when calling GET /transactions/{transactionId}.",
                );
            case "unknown":
                throw new errors.FlagrightError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "x-api-key": apiKeyValue };
    }
}
